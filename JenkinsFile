pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                 git branch: 'main', url:'https://github.com/Dhanu-6/Assessment_Ybrant/main/JenkinsFile'
            }
        }

        stage('Build') {
            steps {
                sh 'npm install'
                sh 'npm run build'
            }
        }
       stage('Vulnerability Scan') {
            steps {
                script {
                    def vulnerabilities = sh(script: 'trivy image -o json your-container-image', returnStatus: true)
                    if (vulnerabilities == 0) {
                        currentBuild.result = 'FAILURE'
                        error("HIGH or CRITICAL vulnerabilities found.")
                    }
                }
            }
        }

        stage('Sonar Analysis') {
            steps {
                   sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.url=URL_OF_SONARQUBE -Dsonar.login=TOKEN_OF_SONARQUBE -Dsonar.projectName=to-do-app \
                   -Dsonar.sources=. \
                   -Dsonar.projectKey=to-do-app '''
               }
            }

       stage('Docker Build') {
            steps {
               script{
                   withDockerRegistry(credentialsId: '9ea0c4b0-721f-4219-be62-48a976dbeec0') {
                    sh "docker build -t  todoapp:latest -f docker/Dockerfile . "
                    sh "docker tag todoapp:latest username/todoapp:latest "
                 }
               }
            }
        }

        stage('Docker Push') {
            steps {
               script{
                   withDockerRegistry(credentialsId: '9ea0c4b0-721f-4219-be62-48a976dbeec0') {
                    sh "docker push  username/todoapp:latest "
                 }
               }
            }
        }
        stage('trivy') {
            steps {
               sh " trivy username/todoapp:latest"
            }
        }
		stage('Deploy to Docker') {
            steps {
               script{
                   withDockerRegistry(credentialsId: '9ea0c4b0-721f-4219-be62-48a976dbeec0') {
                    sh "docker run -d --name to-do-app -p 4000:4000 username/todoapp:latest "
                 }
               }
            }
        }

       post {
        success {
            echo 'Build successful! '
        }
        failure {
            echo 'Build failed. Please check the logs for details.'
        }
    }
    }
}
